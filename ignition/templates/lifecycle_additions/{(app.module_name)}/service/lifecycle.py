import ignition.model.lifecycle as lifecycle_model
from ignition.service.framework import Service
from ignition.service.lifecycle import LifecycleDriverCapability

class LifecycleDriver(Service, LifecycleDriverCapability):

    def execute_lifecycle(self, lifecycle_name, lifecycle_scripts_tree, system_properties, properties, deployment_location):
        """
        Execute a lifecycle transition/operation for a Resource.
        This method should return immediate response of the request being accepted,
        it is expected that the LifecycleService will poll get_lifecycle_execution on this driver to determine when the request has complete (or devise your own method).

        :param str lifecycle_name: name of the lifecycle transition/operation to execute
        :param ignition.utils.file.DirectoryTree lifecycle_scripts_tree: object for navigating the directory of the lifecycle scripts for the Resource
        :param dict system_properties: properties generated by LM for this Resource: instance_id, instance_name
        :param dict properties: property values of the Resource
        :param dict deployment_location: the deployment location the Resource is assigned to
        :return: an ignition.model.lifecycle.LifecycleExecuteResponse
        """
        print("Executing some Lifecycle")
        request_id = '1'
        return lifecycle_model.LifecycleExecuteResponse(request_id)

    def get_lifecycle_execution(self, request_id, deployment_location):
        """
        Retreive the status of a lifecycle transition/operation request

        :param str request_id: identifier of the request to check
        :param dict deployment_location: the deployment location the Resource is assigned to
        :return: an ignition.model.lifecycle.LifecycleExecution
        """
        print("Querying some Lifecycle Execution")
        request_id = '1'
        return lifecycle_model.LifecycleExecution(request_id, lifecycle_model.STATUS_IN_PROGRESS)